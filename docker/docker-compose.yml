services:
  database:
    container_name: database
    image: postgres:latest
    environment:
     - POSTGRES_USERNAME=$DB_USERNAME
     - POSTGRES_PASSWORD=$DB_PASSWORD
     - POSTGRES_DATABASE=$DB_DATABASE_NAME
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "--quiet", "--username=${DB_USERNAME}"]
      interval: 30s
      timeout: 5s
      retries: 3
    ports:
     - "5432:5432"
  data-layer:
    container_name: data-layer
    environment:
     - DB_USERNAME=${DB_USERNAME}
     - DB_PASSWORD=${DB_PASSWORD}
     - DB_DATABASE_NAME=${DB_DATABASE_NAME}
     - DB_CONTAINER=database
     - INIT_API_USER_NAME=${INTERNAL_API_USERNAME}
     - INIT_API_USER_PASSWORD=${INTERNAL_API_PASSWORD}
    depends_on:
      database:
        condition: service_healthy
    build:
      context: ../backend/data-layer
      dockerfile: ../../docker/data-layer.Dockerfile
    restart: always
    ports:
     - "8080:8080"
  webscraper:
    container_name: webscraper
    environment:
     - API_USERNAME=${API_USERNAME}
     - API_PASSWORD=${API_PASSWORD}
     - API_ENDPOINT=${API_BASE_ENDPOINT}
     - API_RATE_LIMIT=${API_RATE_LIMIT}
     - TOKEN_ENDPOINT=${API_TOKEN_ENDPOINT}
     - INTERNAL_API_ENDPOINT=${INTERNAL_API_ENDPOINT}
     - INTERNAL_API_USERNAME=${INTERNAL_API_USERNAME}
     - INTERNAL_API_PASSWORD=${INTERNAL_API_PASSWORD}
    depends_on:
     - "data-layer"
    build:
      context: ../backend/webscraper
      dockerfile: ../../docker/webscraper.Dockerfile
    restart: always
  frontend:
    container_name: frontend
    depends_on:
     - "data-layer"
    build:
      context: ../frontend
      dockerfile: ../docker/frontend.Dockerfile
    ports:
     - "80:80"


